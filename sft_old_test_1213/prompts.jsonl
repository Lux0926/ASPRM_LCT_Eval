{"task_id": 2832, "prompt": "You are given a 0-indexed integer array nums and an integer k.\nA subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.\nReturn the length of the longest possible equal subarray after deleting at most k elements from nums.\nA subarray is a contiguous, possibly empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestEqualSubarray(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 2833, "prompt": "You are given an integer n denoting the total number of servers and a 2D 0-indexed integer array logs, where logs[i] = [server_id, time] denotes that the server with id server_id received a request at time time.\nYou are also given an integer x and a 0-indexed integer array queries.\nReturn a 0-indexed integer array arr of length queries.length where arr[i] represents the number of servers that did not receive any requests during the time interval [queries[i] - x, queries[i]].\nNote that the time intervals are inclusive.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countServers(self, n: int, logs: List[List[int]], x: int, queries: List[int]) -> List[int]:\n```\n"}
{"task_id": 2834, "prompt": "You are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length.\nThroughout moveFrom.length steps, you will change the positions of the marbles. On the ith step, you will move all marbles at position moveFrom[i] to position moveTo[i].\nAfter completing all the steps, return the sorted list of occupied positions.\nNotes:\n\nWe call a position occupied if there is at least one marble in that position.\nThere may be multiple marbles in a single position.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def relocateMarbles(self, nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n```\n"}
{"task_id": 2838, "prompt": "You are given an integer n and a 0-indexed\u00a02D array queries where queries[i] = [typei, indexi, vali].\nInitially, there is a 0-indexed n x n matrix filled with 0's. For each query, you must apply one of the following changes:\n\nif typei == 0, set the values in the row with indexi to vali, overwriting any previous values.\nif typei == 1, set the values in the column with indexi to vali, overwriting any previous values.\n\nReturn the sum of integers in the matrix after all queries are applied.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def matrixSumQueries(self, n: int, queries: List[List[int]]) -> int:\n```\n"}
{"task_id": 2839, "prompt": "You are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [xi, yi].\nFor the ith query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= xi and nums2[j] >= yi, or -1 if there is no j satisfying the constraints.\nReturn an array answer where answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSumQueries(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n```\n"}
{"task_id": 2844, "prompt": "You are given a 1-indexed integer array nums of length n.\nAn element nums[i] of nums is called special if i divides n, i.e. n % i == 0.\nReturn the sum of the squares of all special elements of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfSquares(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2845, "prompt": "You are given a positive integer array nums.\nPartition nums into two arrays,\u00a0nums1 and nums2, such that:\n\nEach element of the array nums belongs to either the array nums1 or the array nums2.\nBoth arrays are non-empty.\nThe value of the partition is minimized.\n\nThe value of the partition is |max(nums1) - min(nums2)|.\nHere, max(nums1) denotes the maximum element of the array nums1, and min(nums2) denotes the minimum element of the array nums2.\nReturn the integer denoting the value of such partition.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findValueOfPartition(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2847, "prompt": "You are given a 0-indexed array words consisting of distinct strings.\nThe string words[i] can be paired with the string words[j] if:\n\nThe string words[i] is equal to the reversed string of words[j].\n0 <= i < j < words.length.\n\nReturn the maximum number of pairs that can be formed from the array words.\nNote that\u00a0each string can belong in\u00a0at most one pair.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumNumberOfStringPairs(self, words: List[str]) -> int:\n```\n"}
{"task_id": 2848, "prompt": "You are given a\u00a00-indexed\u00a0integer array\u00a0nums\u00a0containing\u00a0n\u00a0distinct positive integers. A permutation of\u00a0nums\u00a0is called special if:\n\nFor all indexes\u00a00 <= i < n - 1, either\u00a0nums[i] % nums[i+1] == 0\u00a0or\u00a0nums[i+1] % nums[i] == 0.\n\nReturn\u00a0the total number of special permutations.\u00a0As the answer could be large, return it\u00a0modulo\u00a0109\u00a0+ 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def specialPerm(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2849, "prompt": "The imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that:\n\n0 <= i < n - 1, and\nsarr[i+1] - sarr[i] > 1\n\nHere, sorted(arr) is the function that returns the sorted version of arr.\nGiven a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumImbalanceNumbers(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2850, "prompt": "You are given three integers x, y, and z.\nYou have x strings equal to \"AA\", y strings equal to \"BB\", and z strings equal to \"AB\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"AAA\" or \"BBB\" as a substring.\nReturn the maximum possible length of the new string.\nA substring is a contiguous non-empty sequence of characters within a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n```\n"}
{"task_id": 2856, "prompt": "You are given an array nums consisting of positive integers.\nWe call a subarray of an array complete if the following condition is satisfied:\n\nThe number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.\n\nReturn the number of complete subarrays.\nA subarray is a contiguous non-empty part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countCompleteSubarrays(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2857, "prompt": "A truck has two fuel tanks. You are given two integers, mainTank representing the fuel present in the main tank in liters and additionalTank representing the fuel present in the additional tank in liters.\nThe truck has a mileage of 10 km per liter. Whenever 5 liters of fuel get\u00a0used up in the main tank,\u00a0if the additional tank has at least 1 liters of fuel, 1 liters of fuel will be transferred from the additional tank to the main tank.\nReturn the maximum distance which can be traveled.\nNote: Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def distanceTraveled(self, mainTank: int, additionalTank: int) -> int:\n```\n"}
{"task_id": 2866, "prompt": "You are given a 0-indexed integer array nums and an integer threshold.\nFind the length of the longest subarray of nums starting at index l and ending at index r (0 <= l <= r < nums.length) that satisfies the following conditions:\n\nnums[l] % 2 == 0\nFor all indices i in the range [l, r - 1], nums[i] % 2 != nums[i + 1] % 2\nFor all indices i in the range [l, r], nums[i] <= threshold\n\nReturn an integer denoting the length of the longest such subarray.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestAlternatingSubarray(self, nums: List[int], threshold: int) -> int:\n```\n"}
{"task_id": 2867, "prompt": "You are given a binary array nums.\nA subarray of an array is good if it contains exactly one element with the value 1.\nReturn an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2868, "prompt": "You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:\n\nLet i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.\n\nReturn the total number of continuous subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def continuousSubarrays(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2869, "prompt": "You are given two 0-indexed integer arrays nums1 and nums2 of length n.\nLet's define another 0-indexed integer array, nums3, of length n. For each index i in the range [0, n - 1], you can assign either nums1[i] or nums2[i] to nums3[i].\nYour task is to maximize the length of the longest non-decreasing subarray in nums3 by choosing its values optimally.\nReturn an integer representing the length of the longest non-decreasing subarray in nums3.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNonDecreasingLength(self, nums1: List[int], nums2: List[int]) -> int:\n```\n"}
{"task_id": 2870, "prompt": "You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:\n\nm is greater than 1.\ns1 = s0 + 1.\nThe 0-indexed subarray s looks like [s0, s1, s0, s1,...,s(m-1) % 2]. In other words, s1 - s0 = 1, s2 - s1 = -1, s3 - s2 = 1, s4 - s3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1)m.\n\nReturn the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def alternatingSubarray(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2871, "prompt": "You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes.\nReturn the head of the linked list after doubling it.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```\n"}
{"task_id": 2872, "prompt": "You are given a 0-indexed array nums consisting of positive integers.\nYou can do the following operation on the array any number of times:\n\nChoose an integer i such that 0 <= i < nums.length - 1 and nums[i] <= nums[i + 1]. Replace the element nums[i + 1] with nums[i] + nums[i + 1] and delete the element nums[i] from the array.\n\nReturn the value of the largest element that you can possibly obtain in the final array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxArrayValue(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2873, "prompt": "You are given an integer n. We say that two integers x and y form a prime number pair if:\n\n1 <= x <= y <= n\nx + y == n\nx and y are prime numbers\n\nReturn the 2D sorted list of prime number pairs [xi, yi]. The list should be sorted in increasing order of xi. If there are no prime number pairs at all, return an empty array.\nNote: A prime number is a natural number greater than 1 with only two factors, itself and 1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPrimePairs(self, n: int) -> List[List[int]]:\n```\n"}
{"task_id": 2876, "prompt": "There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company.\nThe company requires each employee to work for at least target hours.\nYou are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target.\nReturn the integer denoting the number of employees who worked at least target hours.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:\n```\n"}
{"task_id": 2877, "prompt": "Given three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings.\nIf there are multiple such strings, return the lexicographically smallest one.\nReturn a string denoting the answer to the problem.\nNotes\n\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nA substring is a contiguous sequence of characters within a string.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n```\n"}
{"task_id": 2878, "prompt": "You are given a 0-indexed integer array nums and a positive integer k.\nYou can apply the following operation on the array any number of times:\n\nChoose any subarray of size k from the array and decrease all its elements by 1.\n\nReturn true if you can make all the array elements equal to 0, or false otherwise.\nA subarray is a contiguous non-empty part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkArray(self, nums: List[int], k: int) -> bool:\n```\n"}
{"task_id": 2879, "prompt": "Given a string s and an integer k, partition s into k substrings such that the letter changes needed to make each substring a semi-palindrome\u00a0are minimized.\nReturn the minimum number of letter changes required.\nA semi-palindrome is a special type of string that can be divided into palindromes based on a repeating pattern. To check if a string is a semi-palindrome:\u200b\n\nChoose a positive divisor d of the string's length. d can range from 1 up to, but not including, the string's length. For a string of length 1, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.\nFor a given divisor d, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length d. Specifically, the first group consists of characters at positions 1, 1 + d, 1 + 2d, and so on; the second group includes characters at positions 2, 2 + d, 2 + 2d, etc.\nThe string is considered a semi-palindrome if each of these groups forms a palindrome.\n\nConsider the string \"abcabc\":\n\nThe length of \"abcabc\" is 6. Valid divisors are 1, 2, and 3.\nFor d = 1: The entire string \"abcabc\" forms one group. Not a palindrome.\nFor d = 2:\n    \nGroup 1 (positions 1, 3, 5): \"acb\"\nGroup 2 (positions 2, 4, 6): \"bac\"\nNeither group forms a palindrome.\n\n\nFor d = 3:\n    \nGroup 1 (positions 1, 4): \"aa\"\nGroup 2 (positions 2, 5): \"bb\"\nGroup 3 (positions 3, 6): \"cc\"\nAll groups form palindromes. Therefore, \"abcabc\" is a semi-palindrome.\n\n\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n```\n"}
{"task_id": 2881, "prompt": "Given an array of strings words and a character separator, split each string in words by separator.\nReturn an array of strings containing the new strings formed after the splits, excluding empty strings.\nNotes\n\nseparator is used to determine where the split should occur, but it is not included as part of the resulting strings.\nA split may result in more than two strings.\nThe resulting strings must maintain the same order as they were initially given.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:\n```\n"}
{"task_id": 2884, "prompt": "You are given a string word and an array of strings forbidden.\nA string is called valid if none of its substrings are present in forbidden.\nReturn the length of the longest valid substring of the string word.\nA substring is a contiguous sequence of characters in a string, possibly empty.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:\n```\n"}
{"task_id": 2886, "prompt": "Your laptop keyboard is faulty, and whenever you type a character 'i' on it, it reverses the string that you have written. Typing other characters works as expected.\nYou are given a 0-indexed string s, and you type each character of s using your faulty keyboard.\nReturn the final string that will be present on your laptop screen.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def finalString(self, s: str) -> str:\n```\n"}
{"task_id": 2887, "prompt": "Given a 0-indexed string s, permute s to get a new string t such that:\n\nAll consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].\nThe vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].\n\nReturn the resulting string.\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sortVowels(self, s: str) -> str:\n```\n"}
{"task_id": 2888, "prompt": "An element x of an integer array arr of length m is dominant if freq(x) * 2 > m, where freq(x) is the number of occurrences of x in arr. Note that this definition implies that arr can have at most one dominant element.\nYou are given a 0-indexed integer array nums of length n with one dominant element.\nYou can split nums at an index i into two arrays nums[0, ..., i] and nums[i + 1, ..., n - 1], but the split is only valid if:\n\n0 <= i < n - 1\nnums[0, ..., i], and nums[i + 1, ..., n - 1] have the same dominant element.\n\nHere, nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j, both ends being inclusive. Particularly, if j < i then nums[i, ..., j] denotes an empty subarray.\nReturn the minimum index of a valid split. If no valid split exists, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumIndex(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2889, "prompt": "You are given two integers m and n representing the dimensions of a\u00a00-indexed\u00a0m x n grid.\nYou are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white.\nA block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1].\nReturn a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countBlackBlocks(self, m: int, n: int, coordinates: List[List[int]]) -> List[int]:\n```\n"}
{"task_id": 2891, "prompt": "You are given a 0-indexed array nums and a non-negative integer k.\nIn one operation, you can do the following:\n\nChoose an index i that hasn't been chosen before from the range [0, nums.length - 1].\nReplace nums[i] with any integer from the range [nums[i] - k, nums[i] + k].\n\nThe beauty of the array is the length of the longest subsequence consisting of equal elements.\nReturn the maximum possible beauty of the array nums after applying the operation any number of times.\nNote that you can apply the operation to each index only once.\nA\u00a0subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 2892, "prompt": "You are given an integer array nums. We consider an array good if it is a permutation of an array base[n].\nbase[n] = [1, 2, ..., n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3].\nReturn true if the given array is good, otherwise return false.\nNote: A permutation of integers represents an arrangement of these numbers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isGood(self, nums: List[int]) -> bool:\n```\n"}
{"task_id": 2893, "prompt": "You are given a 0-indexed integer array nums and a positive integer x.\nYou are initially at position 0 in the array and you can visit other positions according to the following rules:\n\nIf you are currently in position i, then you can move to any position j such that i < j.\nFor each position i that you visit, you get a score of nums[i].\nIf you move from a position i to a position j and the parities of nums[i] and nums[j] differ, then you lose a score of x.\n\nReturn the maximum total score you can get.\nNote that initially you have nums[0] points.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScore(self, nums: List[int], x: int) -> int:\n```\n"}
{"task_id": 2894, "prompt": "You are given a 0-indexed 2D integer array items of length n and an integer k.\nitems[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively.\nLet's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence.\nYour task is to find the maximum elegance from all subsequences of size k in items.\nReturn an integer denoting the maximum elegance of a subsequence of items with size exactly k.\nNote: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n```\n"}
{"task_id": 2902, "prompt": "You are given an integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the largest digit in both numbers is equal.\nFor example, 2373 is made up of three distinct digits: 2, 3, and 7, where 7 is the largest among them.\nReturn the maximum sum or -1 if no such pair exists.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSum(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2903, "prompt": "Given the head of a linked list head, in which each node contains an integer value.\nBetween every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them.\nReturn the linked list after insertion.\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.\n\u00a0\nPlease complete the following python code precisely:\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]:\n```\n"}
{"task_id": 2904, "prompt": "You are given an integer array nums. Each element in nums is 1, 2 or 3. In each operation, you can remove an element from\u00a0nums. Return the minimum number of operations to make nums non-decreasing.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2905, "prompt": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPalindromePaths(self, parent: List[int], s: str) -> int:\n```\n"}
{"task_id": 2914, "prompt": "You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:\n\nA cell containing a thief if grid[r][c] = 1\nAn empty cell if grid[r][c] = 0\n\nYou are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\nThe safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.\nReturn the maximum safeness factor of all paths leading to cell (n - 1, n - 1).\nAn adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.\nThe Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:\n```\n"}
{"task_id": 2915, "prompt": "You are given a 0-indexed integer array nums, an integer modulo, and an integer k.\nYour task is to find the count of subarrays that are interesting.\nA subarray nums[l..r] is interesting if the following condition holds:\n\nLet cnt be the number of indices i in the range [l, r] such that nums[i] % modulo == k. Then, cnt % modulo == k.\n\nReturn an integer denoting the count of interesting subarrays. \nNote: A subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -> int:\n```\n"}
{"task_id": 2917, "prompt": "Given a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, nums: List[int], target: int) -> int:\n```\n"}
{"task_id": 2919, "prompt": "You are given a 0-indexed array usageLimits of length n.\nYour task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions:\n\nEach group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group.\nEach group (except the first one) must have a length strictly greater than the previous group.\n\nReturn an integer denoting the maximum number of groups you can create while satisfying these conditions.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxIncreasingGroups(self, usageLimits: List[int]) -> int:\n```\n"}
{"task_id": 2920, "prompt": "You are given a 0-indexed array nums containing n integers.\nAt each second, you perform the following operation on the array:\n\nFor every index i in the range [0, n - 1], replace nums[i] with either nums[i], nums[(i - 1 + n) % n], or nums[(i + 1) % n].\n\nNote that all the elements get replaced simultaneously.\nReturn the minimum number of seconds needed to make all elements in the array nums equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSeconds(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 2952, "prompt": "You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:\n\nChoose an index 0 <= i < nums1.length and make nums1[i] = 0.\n\nYou are also given an integer x.\nReturn the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:\n```\n"}
{"task_id": 2953, "prompt": "You are given a 2D integer array coordinates and an integer k, where coordinates[i] = [xi, yi] are the coordinates of the ith point in a 2D plane.\nWe define the distance between two points (x1, y1) and (x2, y2) as (x1 XOR x2) + (y1 XOR y2) where XOR is the bitwise XOR operation.\nReturn the number of pairs (i, j) such that i < j and the distance between points i and j is equal to k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPairs(self, coordinates: List[List[int]], k: int) -> int:\n```\n"}
{"task_id": 2954, "prompt": "You are given an integer array nums and two positive integers m and k.\nReturn the maximum sum out of all almost unique subarrays of length k of nums. If no such subarray exists, return 0.\nA subarray of nums is almost unique if it contains at least m distinct elements.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSum(self, nums: List[int], m: int, k: int) -> int:\n```\n"}
{"task_id": 2977, "prompt": "Given an array of strings words and a string s, determine if s is an acronym of words.\nThe string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"].\nReturn true if s is an acronym of words, and false otherwise. \n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isAcronym(self, words: List[str], s: str) -> bool:\n```\n"}
{"task_id": 2978, "prompt": "You are given two strings s1 and s2, both of length n, consisting of lowercase English letters.\nYou can apply the following operation on any of the two strings any number of times:\n\nChoose any two indices i and j such that i < j and the difference j - i is even, then swap the two characters at those indices in the string.\n\nReturn true if you can make the strings s1 and s2 equal, and\u00a0false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def checkStrings(self, s1: str, s2: str) -> bool:\n```\n"}
{"task_id": 2979, "prompt": "You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.\nAdditionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that ith buyer wants to buy all the houses from starti to endi for goldi amount of gold.\nAs a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.\nReturn the maximum amount of gold you can earn.\nNote that different buyers can't buy the same house, and some houses may remain unsold.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n```\n"}
{"task_id": 2998, "prompt": "You are given two positive integers low and high.\nAn integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.\nReturn the number of symmetric integers in the range [low, high].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSymmetricIntegers(self, low: int, high: int) -> int:\n```\n"}
{"task_id": 2999, "prompt": "You are given two strings s1 and s2, both of length 4, consisting of lowercase English letters.\nYou can apply the following operation on any of the two strings any number of times:\n\nChoose any two indices i and j such that j - i = 2, then swap the two characters at those indices in the string.\n\nReturn true if you can make the strings s1 and s2 equal, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canBeEqual(self, s1: str, s2: str) -> bool:\n```\n"}
{"task_id": 3000, "prompt": "You are given a 0-indexed integer array nums and an integer x.\nFind the minimum absolute difference between two elements in the array that are at least x indices apart.\nIn other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized.\nReturn an integer denoting the minimum absolute difference between two elements that are at least x indices apart.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minAbsoluteDifference(self, nums: List[int], x: int) -> int:\n```\n"}
{"task_id": 3018, "prompt": "You are given two 0-indexed strings str1 and str2.\nIn an operation, you select a set of indices in str1, and for each index i in the set, increment str1[i] to the next character cyclically. That is 'a' becomes 'b', 'b' becomes 'c', and so on, and 'z' becomes 'a'.\nReturn true if it is possible to make str2 a subsequence of str1 by performing the operation at most once, and false otherwise.\nNote: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canMakeSubsequence(self, str1: str, str2: str) -> bool:\n```\n"}
{"task_id": 3019, "prompt": "You are given a string moves of length n consisting only of characters 'L', 'R', and '_'. The string represents your movement on a number line starting from the origin 0.\nIn the ith move, you can choose one of the following directions:\n\nmove to the left if moves[i] = 'L' or moves[i] = '_'\nmove to the right if moves[i] = 'R' or moves[i] = '_'\n\nReturn the distance from the origin of the furthest point you can get to after n moves.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def furthestDistanceFromOrigin(self, moves: str) -> int:\n```\n"}
{"task_id": 3024, "prompt": "You are given two strings s and t of equal length n. You can perform the following operation on the string s:\n\nRemove a suffix of s of length l where 0 < l < n and append it at the start of s.\n    For example, let s = 'abcd' then in one operation you can remove the suffix 'cd' and append it in front of s making s = 'cdab'.\n\nYou are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations.\nSince the answer can be large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfWays(self, s: str, t: str, k: int) -> int:\n```\n"}
{"task_id": 3025, "prompt": "You are given a 0-indexed array nums consisting of non-negative powers of 2, and an integer target.\nIn one operation, you must apply the following changes to the array:\n\nChoose any element of the array nums[i] such that nums[i] > 1.\nRemove nums[i] from the array.\nAdd two occurrences of nums[i] / 2 to the end of nums.\n\nReturn the minimum number of operations you need to perform so that nums contains a subsequence whose elements sum to target. If it is impossible to obtain such a subsequence, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int], target: int) -> int:\n```\n"}
{"task_id": 3026, "prompt": "You are given positive integers n and target.\nAn array nums is beautiful if it meets the following conditions:\n\nnums.length == n.\nnums consists of pairwise distinct positive integers.\nThere doesn't exist two distinct indices, i and j, in the range [0, n - 1], such that nums[i] + nums[j] == target.\n\nReturn the minimum possible sum that a beautiful array could have modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumPossibleSum(self, n: int, target: int) -> int:\n```\n"}
{"task_id": 3031, "prompt": "Given a 0-indexed 2D integer matrix grid of size n * m, we define a 0-indexed 2D matrix p of size n * m as the product matrix of grid if the following condition is met:\n\nEach element p[i][j] is calculated as the product of all elements in grid except for the element grid[i][j]. This product is then taken modulo 12345.\n\nReturn the product matrix of grid.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n```\n"}
{"task_id": 3032, "prompt": "You are given an integer array receiver of length n and an integer k. n players are playing a ball-passing game.\nYou choose the starting player, i. The game proceeds as follows: player i passes the ball to player receiver[i], who then passes it to receiver[receiver[i]], and so on, for k passes in total. The game's score is the sum of the indices of the players who touched the ball, including repetitions, i.e. i + receiver[i] + receiver[receiver[i]] + ... + receiver(k)[i].\nReturn\u00a0the maximum\u00a0possible score.\nNotes:\n\nreceiver may contain duplicates.\nreceiver[i] may be equal to i.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n```\n"}
{"task_id": 3034, "prompt": "You are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [starti, endi] where starti is the starting point of the ith car and endi is the ending point of the ith car.\nReturn the number of integer points on the line that are covered with any part of a car.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfPoints(self, nums: List[List[int]]) -> int:\n```\n"}
{"task_id": 3044, "prompt": "You are given an array nums of positive integers and an integer k.\nIn one operation, you can remove the last element of the array and add it to your collection.\nReturn the minimum number of operations needed to collect elements 1, 2, ..., k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3045, "prompt": "You are given a 0-indexed array nums of length n containing distinct positive integers. Return the minimum number of right shifts required to sort nums and -1 if this is not possible.\nA right shift is defined as shifting the element at index i to index (i + 1) % n, for all indices.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumRightShifts(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3047, "prompt": "You are given a 1-indexed array nums. Your task is to select a complete subset from nums where every pair of selected indices multiplied is a perfect square,. i. e. if you select ai and aj, i * j must be a perfect square.\nReturn the sum of the complete subset with the maximum sum.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3055, "prompt": "You are given a binary string s that contains at least one '1'.\nYou have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.\nReturn a string representing the maximum odd binary number that can be created from the given combination.\nNote that the resulting string can have leading zeros.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumOddBinaryNumber(self, s: str) -> str:\n```\n"}
{"task_id": 3056, "prompt": "You are given four integers sx, sy, fx, fy, and a non-negative integer t.\nIn an infinite 2D grid, you start at the cell (sx, sy). Each second, you must move to any of its adjacent cells.\nReturn true if you can reach cell (fx, fy) after exactly t seconds, or false otherwise.\nA cell's adjacent cells are the 8 cells around it that share at least one corner with it. You can visit the same cell several times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isReachableAtTime(self, sx: int, sy: int, fx: int, fy: int, t: int) -> bool:\n```\n"}
{"task_id": 3058, "prompt": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node, and an integer k.\nA valid split of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by k, where the value of a connected component is the sum of the values of its nodes.\nReturn the maximum number of components in any valid split.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxKDivisibleComponents(self, n: int, edges: List[List[int]], values: List[int], k: int) -> int:\n```\n"}
{"task_id": 3079, "prompt": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi in the tree.\nYou are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, find the minimum number of operations required to make the weight of every edge on the path from ai to bi equal. In one operation, you can choose any edge of the tree and change its weight to any value.\nNote that:\n\nQueries are independent of each other, meaning that the tree returns to its initial state on each new query.\nThe path from ai to bi is a sequence of distinct nodes starting with node ai and ending with node bi such that every two adjacent nodes in the sequence share an edge in the tree.\n\nReturn an array answer of length m where answer[i] is the answer to the ith query.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperationsQueries(self, n: int, edges: List[List[int]], queries: List[List[int]]) -> List[int]:\n```\n"}
{"task_id": 3080, "prompt": "You are given an array nums consisting of non-negative integers.\nWe define the score of subarray nums[l..r] such that l <= r as nums[l] AND nums[l + 1] AND ... AND nums[r] where AND is the bitwise AND operation.\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\n\nEach element of the array belongs to exactly one subarray.\nThe sum of scores of the subarrays is the minimum possible.\n\nReturn the maximum number of subarrays in a split that satisfies the conditions above.\nA subarray is a contiguous part of an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSubarrays(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3081, "prompt": "Given an integer array num sorted in non-decreasing order.\nYou can perform the following operation any number of times:\n\nChoose two indices, i and j, where nums[i] < nums[j].\nThen, remove the elements at indices i and j from nums. The remaining elements retain their original order, and the array is re-indexed.\n\nReturn the minimum length of nums after applying the operation zero or more times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minLengthAfterRemovals(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3092, "prompt": "You are given a 0-indexed 2D integer matrix grid of size 3 * 3, representing the number of stones in each cell. The grid contains exactly 9 stones, and there can be multiple stones in a single cell.\nIn one move, you can move a single stone from its current cell to any other cell if the two cells share a side.\nReturn the minimum number of moves required to place one stone in each cell.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumMoves(self, grid: List[List[int]]) -> int:\n```\n"}
{"task_id": 3094, "prompt": "You are given a 0-indexed array nums consisting of positive integers.\nThere are two types of operations that you can apply on the array any number of times:\n\nChoose two elements with equal values and delete them from the array.\nChoose three elements with equal values and delete them from the array.\n\nReturn the minimum number of operations required to make the array empty, or -1 if it is not possible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3095, "prompt": "You are the owner of a company that creates alloys using various types of metals. There are n different types of metals available, and you have access to k machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.\nFor the ith machine to create an alloy, it needs composition[i][j] units of metal of type j. Initially, you have stock[i] units of metal type i, and purchasing one unit of metal type i costs cost[i] coins.\nGiven integers n, k, budget, a 1-indexed 2D array composition, and 1-indexed arrays stock and cost, your goal is to maximize the number of alloys the company can create while staying within the budget of budget coins.\nAll alloys must be created with the same machine.\nReturn the maximum number of alloys that the company can create.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxNumberOfAlloys(self, n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n```\n"}
{"task_id": 3105, "prompt": "There is a simple directed graph with n nodes labeled from 0 to n - 1. The graph would form a tree if its edges were bi-directional.\nYou are given an integer n and a 2D integer array edges, where edges[i] = [ui, vi] represents a directed edge going from node ui to node vi.\nAn edge reversal changes the direction of an edge, i.e., a directed edge going from node ui to node vi becomes a directed edge going from node vi to node ui.\nFor every node i in the range [0, n - 1], your task is to independently calculate the minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\nReturn an integer array answer, where answer[i] is the  minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minEdgeReversals(self, n: int, edges: List[List[int]]) -> List[int]:\n```\n"}
{"task_id": 3106, "prompt": "You are given a 0-indexed array of integers nums, and an integer target.\nReturn the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n```\n"}
{"task_id": 3107, "prompt": "You are given a 0-indexed m * n integer matrix values, representing the values of m * n different items in m different shops. Each shop has n items where the jth item in the ith shop has a value of values[i][j]. Additionally, the items in the ith shop are sorted in non-increasing order of value. That is, values[i][j] >= values[i][j + 1] for all 0 <= j < n - 1.\nOn each day, you would like to buy a single item from one of the shops. Specifically, On the dth day you can:\n\nPick any shop i.\nBuy the rightmost available item j for the price of values[i][j] * d. That is, find the greatest index j such that item j was never bought before, and buy it for the price of values[i][j] * d.\n\nNote that all items are pairwise different. For example, if you have bought item 0 from shop 1, you can still buy item 0 from any other shop.\nReturn the maximum amount of money that can be spent on buying all  m * n products.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSpending(self, values: List[List[int]]) -> int:\n```\n"}
{"task_id": 3112, "prompt": "There is an undirected tree with n nodes labeled from 1 to n. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree.\nReturn the number of valid paths in the tree.\nA path (a, b) is valid if there exists exactly one prime number among the node labels in the path from a to b.\nNote that:\n\nThe path (a, b) is a sequence of distinct nodes starting with node a and ending with node b such that every two adjacent nodes in the sequence share an edge in the tree.\nPath (a, b) and path (b, a) are considered the same and counted only once.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPaths(self, n: int, edges: List[List[int]]) -> int:\n```\n"}
{"task_id": 3113, "prompt": "You are given a 0-indexed array maxHeights of n integers.\nYou are tasked with building n towers in the coordinate line. The ith tower is built at coordinate i and has a height of heights[i].\nA configuration of towers is beautiful if the following conditions hold:\n\n1 <= heights[i] <= maxHeights[i]\nheights is a mountain array.\n\nArray heights is a mountain if there exists an index i such that:\n\nFor all 0 < j <= i, heights[j - 1] <= heights[j]\nFor all i <= k < n - 1, heights[k + 1] <= heights[k]\n\nReturn the maximum possible sum of heights of a beautiful configuration of towers.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n```\n"}
{"task_id": 3114, "prompt": "You are given an array heights of n integers representing the number of bricks in n consecutive towers. Your task is to remove some bricks to form a mountain-shaped tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing.\nReturn the maximum possible sum of heights of a mountain-shaped tower arrangement.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n```\n"}
{"task_id": 3140, "prompt": "There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges.\nYou are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i].\nConsider the following process on the graph:\n\nYou start from a node x and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.\n\nReturn an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countVisitedNodes(self, edges: List[int]) -> List[int]:\n```\n"}
{"task_id": 3150, "prompt": "You are given a binary string s and a positive integer k.\nA substring of s is beautiful if the number of 1's in it is exactly k.\nLet len be the length of the shortest beautiful substring.\nReturn the lexicographically smallest beautiful substring of string s with length equal to len. If s doesn't contain a beautiful substring, return an empty string.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b.\n\nFor example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def shortestBeautifulSubstring(self, s: str, k: int) -> str:\n```\n"}
{"task_id": 3151, "prompt": "You have a certain number of processors, each having 4 cores. The number of tasks to be executed is four times the number of processors. Each task must be assigned to a unique core, and each core can only be used once.\nYou are given an array processorTime representing the time each processor becomes available and an array tasks representing how long each task takes to complete. Return the\u00a0minimum time needed to complete all tasks.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minProcessingTime(self, processorTime: List[int], tasks: List[int]) -> int:\n```\n"}
{"task_id": 3153, "prompt": "You are given a 0-indexed integer array nums and a positive integer k.\nYou can do the following operation on the array any number of times:\n\nChoose any two distinct indices i and j and simultaneously update the values of nums[i] to (nums[i] AND nums[j]) and nums[j] to (nums[i] OR nums[j]). Here, OR denotes the bitwise OR operation, and AND denotes the bitwise AND operation.\n\nYou have to choose k elements from the final array and calculate the sum of their squares.\nReturn the maximum sum of squares you can achieve.\nSince the answer can be very large, return it modulo 109 + 7.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSum(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3154, "prompt": "You are given a 0-indexed integer array nums.\nReturn the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.\nThe value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumTripletValue(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3163, "prompt": "You are given a 0-indexed integer array nums.\nThe distinct count of a subarray of nums is defined as:\n\nLet nums[i..j] be a subarray of nums consisting of all the indices from i to j such that 0 <= i <= j < nums.length. Then the number of distinct values in nums[i..j] is called the distinct count of nums[i..j].\n\nReturn the sum of the squares of distinct counts of all subarrays of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3165, "prompt": "You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference.\nYour task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions:\n\nabs(i - j) >= indexDifference, and\nabs(nums[i] - nums[j]) >= valueDifference\n\nReturn an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them.\nNote: i and j may be equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findIndices(self, nums: List[int], indexDifference: int, valueDifference: int) -> List[int]:\n```\n"}
{"task_id": 3171, "prompt": "You are given two arrays nums1 and nums2 consisting of positive integers.\nYou have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.\nReturn the minimum equal sum you can obtain, or -1 if it is impossible.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n```\n"}
{"task_id": 3172, "prompt": "You are given positive integers n and m.\nDefine two integers as follows:\n\nnum1: The sum of all integers in the range [1, n] (both inclusive) that are not divisible by m.\nnum2: The sum of all integers in the range [1, n] (both inclusive) that are divisible by m.\n\nReturn the integer num1 - num2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def differenceOfSums(self, n: int, m: int) -> int:\n```\n"}
{"task_id": 3174, "prompt": "You are given a 0-indexed binary string s having an even length.\nA string is beautiful if it's possible to partition it into one or more substrings such that:\n\nEach substring has an even length.\nEach substring contains only 1's or only 0's.\n\nYou can change any character in s to 0 or 1.\nReturn the minimum number of changes required to make the string s beautiful.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minChanges(self, s: str) -> int:\n```\n"}
{"task_id": 3176, "prompt": "You are given a 0-indexed array nums of integers.\nA triplet of indices (i, j, k) is a mountain if:\n\ni < j < k\nnums[i] < nums[j] and nums[k] < nums[j]\n\nReturn the minimum possible sum of a mountain triplet of nums. If no such triplet exists, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSum(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3178, "prompt": "You are given a 0-indexed integer array nums having length n, and an integer k.\nYou can perform the following increment operation any number of times (including zero):\n\nChoose an index i in the range [0, n - 1], and increase nums[i] by 1.\n\nAn array is considered beautiful if, for any subarray with a size of 3 or more, its maximum element is greater than or equal to k.\nReturn an integer denoting the minimum number of increment operations needed to make nums beautiful.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3181, "prompt": "You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building.\nIf a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j].\nYou are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi.\nReturn an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query. If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:\n```\n"}
{"task_id": 3183, "prompt": "You are given an integer array nums, and an integer k. Let's introduce\u00a0K-or operation by extending the standard bitwise OR. In K-or, a bit position in the result is set to 1\u00a0if at least k numbers in nums have a 1 in that position.\nReturn the K-or of nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3184, "prompt": "You are given a 0-indexed integer array nums.\nA subsequence of nums having length k and consisting of indices i0\u00a0<\u00a0i1 <\u00a0... < ik-1 is balanced if the following holds:\n\nnums[ij] - nums[ij-1] >= ij - ij-1, for every j in the range [1, k - 1].\n\nA subsequence of nums having length 1 is considered balanced.\nReturn an integer denoting the maximum possible sum of elements in a balanced subsequence of nums.\nA subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3188, "prompt": "There are n teams numbered from 0 to n - 1 in a tournament.\nGiven a 0-indexed 2D boolean matrix grid of size n * n. For all i, j that 0 <= i, j <= n - 1 and i != j team i is stronger than team j if grid[i][j] == 1, otherwise, team j is stronger than team i.\nTeam a will be the champion of the tournament if there is no team b that is stronger than team a.\nReturn the team that will be the champion of the tournament.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findChampion(self, grid: List[List[int]]) -> int:\n```\n"}
{"task_id": 3189, "prompt": "There are n teams numbered from 0 to n - 1 in a tournament; each team is also a node in a DAG.\nYou are given the integer n and a 0-indexed 2D integer array edges of length m representing the DAG, where edges[i] = [ui, vi] indicates that there is a directed edge from team ui to team vi in the graph.\nA directed edge from a to b in the graph means that team a is stronger than team b and team b is weaker than team a.\nTeam a will be the champion of the tournament if there is no team b that is stronger than team a.\nReturn the team that will be the champion of the tournament if there is a unique champion, otherwise, return -1.\nNotes\n\nA cycle is a series of nodes a1, a2, ..., an, an+1 such that node a1 is the same node as node an+1, the nodes a1, a2, ..., an are distinct, and there is a directed edge from the node ai to node ai+1 for every i in the range [1, n].\nA DAG is a directed graph that does not have any cycle.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n```\n"}
{"task_id": 3191, "prompt": "There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given\u00a0a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node.\nYou start with a score of 0. In one operation, you can:\n\nPick any node i.\nAdd values[i] to your score.\nSet values[i] to 0.\n\nA tree is healthy if the sum of values on the path from the root to any leaf node is different than zero.\nReturn the maximum score you can obtain after performing these operations on the tree any number of times so that it remains healthy.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], values: List[int]) -> int:\n```\n"}
{"task_id": 3192, "prompt": "Given three integers a, b, and n, return the maximum value of (a XOR x) * (b XOR x) where 0 <= x < 2n.\nSince the answer may be too large, return it modulo 109 + 7.\nNote that XOR is the bitwise XOR operation.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumXorProduct(self, a: int, b: int, n: int) -> int:\n```\n"}
{"task_id": 3193, "prompt": "You are given a 0-indexed integer array nums. A pair of integers x and y is called a strong pair if it satisfies the condition:\n\n|x - y| <= min(x, y)\n\nYou need to select two integers from nums such that they form a strong pair and their bitwise XOR is the maximum among all strong pairs in the array.\nReturn the maximum XOR value out of all possible strong pairs in the array nums.\nNote that you can pick the same integer twice to form a pair.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3194, "prompt": "You are given a 0-indexed array of strings words and a character x.\nReturn an array of indices representing the words that contain the character x.\nNote that the returned array may be in any order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findWordsContaining(self, words: List[str], x: str) -> List[int]:\n```\n"}
{"task_id": 3195, "prompt": "There are n balls on a table, each ball has a color black or white.\nYou are given a 0-indexed binary string s of length n, where 1 and 0 represent black and white balls, respectively.\nIn each step, you can choose two adjacent balls and swap them.\nReturn the minimum number of steps to group all the black balls to the right and all the white balls to the left.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumSteps(self, s: str) -> int:\n```\n"}
{"task_id": 3203, "prompt": "You are given a 0-indexed string s having an even length n.\nYou are also given a 0-indexed 2D integer array, queries, where queries[i] = [ai, bi, ci, di].\nFor each query i, you are allowed to perform the following operations:\n\nRearrange the characters within the substring s[ai:bi], where 0 <= ai <= bi < n / 2.\nRearrange the characters within the substring s[ci:di], where n / 2 <= ci <= di < n.\n\nFor each query, your task is to determine whether it is possible to make s a palindrome by performing the operations.\nEach query is answered independently of the others.\nReturn a 0-indexed array answer, where answer[i] == true if it is possible to make s a palindrome by performing operations specified by the ith query, and false otherwise.\n\nA substring is a contiguous sequence of characters within a string.\ns[x:y] represents the substring consisting of characters from the index x to index y in s, both inclusive.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n```\n"}
{"task_id": 3206, "prompt": "You are given two integer arrays nums1 and nums2 of sizes n and m, respectively. Calculate the following values:\n\nanswer1 : the number of indices i such that nums1[i] exists in nums2.\nanswer2 : the number of indices i such that nums2[i] exists in nums1.\n\nReturn [answer1,answer2].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findIntersectionValues(self, nums1: List[int], nums2: List[int]) -> List[int]:\n```\n"}
{"task_id": 3210, "prompt": "You are given a string s and a positive integer k.\nLet vowels and consonants be the number of vowels and consonants in a string.\nA string is beautiful if:\n\nvowels == consonants.\n(vowels * consonants) % k == 0, in other terms the multiplication of vowels and consonants is divisible by k.\n\nReturn the number of non-empty beautiful substrings in the given string s.\nA substring is a contiguous sequence of characters in a string.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\nConsonant letters in English are every letter except vowels.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def beautifulSubstrings(self, s: str, k: int) -> int:\n```\n"}
{"task_id": 3213, "prompt": "You are given an integer array nums and a positive integer k.\nReturn the number of subarrays where the maximum element of nums appears at least k times in that subarray.\nA subarray is a contiguous sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3214, "prompt": "You are given the two integers, n and m and two integer arrays, hBars and vBars. The grid has n + 2 horizontal and m + 2 vertical bars, creating 1 x 1 unit cells. The bars are indexed starting from 1.\nYou can remove some of the bars in hBars from horizontal bars and some of the bars in vBars from vertical bars. Note that other bars are fixed and cannot be removed.\nReturn an integer denoting the maximum area of a square-shaped hole in the grid, after removing some bars (possibly none).\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximizeSquareHoleArea(self, n: int, m: int, hBars: List[int], vBars: List[int]) -> int:\n```\n"}
{"task_id": 3215, "prompt": "You are given an m x n integer matrix mat and an integer k. The matrix rows are 0-indexed.\nThe following proccess happens k times:\n\nEven-indexed rows (0, 2, 4, ...) are cyclically shifted to the left.\n\n\n\nOdd-indexed rows (1, 3, 5, ...) are cyclically shifted to the right.\n\n\nReturn true if the final modified matrix after k steps is identical to the original matrix, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def areSimilar(self, mat: List[List[int]], k: int) -> bool:\n```\n"}
{"task_id": 3217, "prompt": "There is a company with n branches across the country, some of which are connected by roads. Initially, all branches are reachable from each other by traveling some roads.\nThe company has realized that they are spending an excessive amount of time traveling between their branches. As a result, they have decided to close down some of these branches (possibly none). However, they want to ensure that the remaining branches have a distance of at most maxDistance from each other.\nThe distance between two branches is the minimum total traveled length needed to reach one branch from another.\nYou are given integers n, maxDistance, and a 0-indexed 2D array roads, where roads[i] = [ui, vi, wi] represents the undirected road between branches ui and vi with length wi.\nReturn the number of possible sets of closing branches, so that any branch has a distance of at most maxDistance from any other.\nNote that, after closing a branch, the company will no longer have access to any roads connected to it.\nNote that, multiple roads are allowed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSets(self, n: int, maxDistance: int, roads: List[List[int]]) -> int:\n```\n"}
{"task_id": 3218, "prompt": "You are given an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array cost of length n, where cost[i] is the cost assigned to the ith node.\nYou need to place some coins on every node of the tree. The number of coins to be placed at node i can be calculated as:\n\nIf size of the subtree of node i is less than 3, place 1 coin.\nOtherwise, place an amount of coins equal to the maximum product of cost values assigned to 3 distinct nodes in the subtree of node i. If this product is negative, place 0 coins.\n\nReturn an array coin of size n such that coin[i] is the number of coins placed at node i.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def placedCoins(self, edges: List[List[int]], cost: List[int]) -> List[int]:\n```\n"}
{"task_id": 3219, "prompt": "You are given a 0-indexed array of positive integers nums and a positive integer limit.\nIn one operation, you can choose any two indices i and j and swap nums[i] and nums[j] if |nums[i] - nums[j]| <= limit.\nReturn the lexicographically smallest array that can be obtained by performing the operation any number of times.\nAn array a is lexicographically smaller than an array b if in the first position where a and b differ, array a has an element that is less than the corresponding element in b. For example, the array [2,10,3] is lexicographically smaller than the array [10,2,3] because they differ at index 0 and 2 < 10.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def lexicographicallySmallestArray(self, nums: List[int], limit: int) -> List[int]:\n```\n"}
{"task_id": 3220, "prompt": "You are given a 0-indexed integer array batteryPercentages having length n, denoting the battery percentages of n 0-indexed devices.\nYour task is to test each device i in order from 0 to n - 1, by performing the following test operations:\n\nIf batteryPercentages[i] is greater than 0:\n\n    \nIncrement the count of tested devices.\nDecrease the battery percentage of all devices with indices j in the range [i + 1, n - 1] by 1, ensuring their battery percentage never goes below 0, i.e, batteryPercentages[j] = max(0, batteryPercentages[j] - 1).\nMove to the next device.\n\n\nOtherwise, move to the next device without performing any test.\n\nReturn an integer denoting the number of devices that will be tested after performing the test operations in order.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countTestedDevices(self, batteryPercentages: List[int]) -> int:\n```\n"}
{"task_id": 3221, "prompt": "You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array.\nReturn an array that consists of indices of peaks in the given array in any order.\nNotes:\n\nA peak is defined as an element that is strictly greater than its neighboring elements.\nThe first and last elements of the array are not a peak.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPeaks(self, mountain: List[int]) -> List[int]:\n```\n"}
{"task_id": 3223, "prompt": "You are given a string word and an integer k.\nA substring s of word is complete if:\n\nEach character in s occurs exactly k times.\nThe difference between two adjacent characters is at most 2. That is, for any two adjacent characters c1 and c2 in s, the absolute difference in their positions in the alphabet is at most 2.\n\nReturn the number of complete substrings of word.\nA substring is a non-empty contiguous sequence of characters in a string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countCompleteSubstrings(self, word: str, k: int) -> int:\n```\n"}
{"task_id": 3225, "prompt": "You are given an integer array nums and an integer k.\nThe frequency of an element x is the number of times it occurs in an array.\nAn array is called good if the frequency of each element in this array is less than or equal to k.\nReturn the length of the longest good subarray of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxSubarrayLength(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3226, "prompt": "You are given a 0-indexed integer array nums of even length and there is also an empty array arr. Alice and Bob decided to play a game where in every round Alice and Bob will do one move. The rules of the game are as follows:\n\nEvery round, first Alice will remove the minimum element from nums, and then Bob does the same.\nNow, first Bob will append the removed element in the array arr, and then Alice does the same.\nThe game continues until nums becomes empty.\n\nReturn the resulting array arr.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberGame(self, nums: List[int]) -> List[int]:\n```\n"}
{"task_id": 3227, "prompt": "You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.\nReturn a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:\n```\n"}
{"task_id": 3229, "prompt": "You are given a 0-indexed integer array nums having length n.\nYou are allowed to perform a special move any number of times (including zero) on nums. In one special move you perform the following steps in order:\n\nChoose an index i in the range [0, n - 1], and a positive integer x.\nAdd |nums[i] - x| to the total cost.\nChange the value of nums[i] to x.\n\nA palindromic number is a positive integer that remains the same when its digits are reversed. For example, 121, 2552 and 65756 are palindromic numbers whereas 24, 46, 235 are not palindromic numbers.\nAn array is considered equalindromic if all the elements in the array are equal to an integer y, where y is a palindromic number less than 109.\nReturn an integer denoting the minimum possible total cost to make nums equalindromic by performing any number of special moves.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCost(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3230, "prompt": "You are given a 0-indexed string word.\nIn one operation, you can pick any index i of word and change word[i] to any lowercase English letter.\nReturn the minimum number of operations needed to remove all adjacent almost-equal characters from word.\nTwo characters a and b are almost-equal if a == b or a and b are adjacent in the alphabet.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def removeAlmostEqualCharacters(self, word: str) -> int:\n```\n"}
{"task_id": 3231, "prompt": "You are given a 0-indexed integer array coins, representing the values of the coins available, and an integer target.\nAn integer x is obtainable if there exists a subsequence of coins that sums to x.\nReturn the minimum number of coins of any value that need to be added to the array so that every integer in the range [1, target] is obtainable.\nA subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumAddedCoins(self, coins: List[int], target: int) -> int:\n```\n"}
{"task_id": 3235, "prompt": "You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i].\nYou start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.\nReturn the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.\nNote that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n```\n"}
{"task_id": 3236, "prompt": "You are given a 0-indexed array of integers nums.\nA prefix nums[0..i] is sequential if, for all 1 <= j <= i, nums[j] = nums[j - 1] + 1. In particular, the prefix consisting only of nums[0] is sequential.\nReturn the smallest integer x missing from nums such that x is greater than or equal to the sum of the longest sequential prefix.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def missingInteger(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3241, "prompt": "You are given an integer array nums of size n where n is a multiple of 3 and a positive integer k.\nDivide the array nums into n / 3 arrays of size 3 satisfying the following condition:\n\nThe difference between any two elements in one array is less than or equal to k.\n\nReturn a 2D array containing the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def divideArray(self, nums: List[int], k: int) -> List[List[int]]:\n```\n"}
{"task_id": 3244, "prompt": "You are given a 0-indexed integer array nums containing positive integers.\nYour task is to minimize the length of nums by performing the following operations any number of times (including zero):\n\nSelect two distinct indices i and j from nums, such that nums[i] > 0 and nums[j] > 0.\nInsert the result of nums[i] % nums[j] at the end of nums.\nDelete the elements at indices i and j from nums.\n\nReturn an integer denoting the minimum length of nums after performing the operation any number of times.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumArrayLength(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3245, "prompt": "You are given a 0-indexed string s, a string a, a string b, and an integer k.\nAn index i is beautiful if:\n\n0 <= i <= s.length - a.length\ns[i..(i + a.length - 1)] == a\nThere exists an index j such that:\n    \n0 <= j <= s.length - b.length\ns[j..(j + b.length - 1)] == b\n|j - i| <= k\n\n\n\nReturn the array that contains beautiful indices in sorted order from smallest to largest.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n```\n"}
{"task_id": 3250, "prompt": "There is a large (m - 1) x (n - 1) rectangular field with corners at (1, 1) and (m, n) containing some horizontal and vertical fences given in arrays hFences and vFences respectively.\nHorizontal fences are from the coordinates (hFences[i], 1) to (hFences[i], n) and vertical fences are from the coordinates (1, vFences[i]) to (m, vFences[i]).\nReturn the maximum area of a square field that can be formed by removing some fences (possibly none) or -1 if it is impossible to make a square field.\nSince the answer may be large, return it modulo 109 + 7.\nNote: The field is surrounded by two horizontal fences from the coordinates (1, 1) to (1, n) and (m, 1) to (m, n) and two vertical fences from the coordinates (1, 1) to (m, 1) and (1, n) to (m, n). These fences cannot be removed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n```\n"}
{"task_id": 3252, "prompt": "You are given a 0-indexed array of positive integers nums.\nA subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.\nReturn the total number of incremovable subarrays of nums.\nNote that an empty array is considered strictly increasing.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def incremovableSubarrayCount(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3261, "prompt": "You are given a 0-indexed integer array nums and an integer k.\nIn one operation, you can pick any index i of nums such that 0 <= i < nums.length - 1 and replace nums[i] and nums[i + 1] with a single occurrence of nums[i] & nums[i + 1], where & represents the bitwise AND operator.\nReturn the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOrAfterOperations(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3263, "prompt": "You are given an array of integers nums of length n.\nThe cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\nYou need to divide nums into 3 disjoint contiguous subarrays.\nReturn the minimum possible sum of the cost of these subarrays.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCost(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3265, "prompt": "You are given an array nums of length n and a positive integer k.\nA subarray of nums is called good if the absolute difference between its first and last element is exactly k, in other words, the subarray nums[i..j] is good if |nums[i] - nums[j]| == k.\nReturn the maximum sum of a good subarray of nums. If there are no good subarrays, return 0.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3270, "prompt": "There is a 1-indexed 8 x 8 chessboard containing 3 pieces.\nYou are given 6 integers a, b, c, d, e, and f where:\n\n(a, b) denotes the position of the white rook.\n(c, d) denotes the position of the white bishop.\n(e, f) denotes the position of the black queen.\n\nGiven that you can only move the white pieces, return the minimum number of moves required to capture the black queen.\nNote that:\n\nRooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.\nBishops can move any number of squares diagonally, but cannot jump over other pieces.\nA rook or a bishop can capture the queen if it is located in a square that they can move to.\nThe queen does not move.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minMovesToCaptureTheQueen(self, a: int, b: int, c: int, d: int, e: int, f: int) -> int:\n```\n"}
{"task_id": 3271, "prompt": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countOfPairs(self, n: int, x: int, y: int) -> List[int]:\n```\n"}
{"task_id": 3272, "prompt": "You are given m x n grid image which represents a grayscale image, where image[i][j] represents a pixel with intensity in the range [0..255]. You are also given a non-negative integer threshold.\nTwo pixels are adjacent if they share an edge.\nA region is a 3 x 3 subgrid where the absolute difference in intensity between any two adjacent pixels is less than or equal to threshold.\nAll pixels in a region belong to that region, note that a pixel can belong to multiple regions.\nYou need to calculate a m x n grid result, where result[i][j] is the average intensity of the regions to which image[i][j] belongs, rounded down to the nearest integer. If image[i][j] belongs to multiple regions, result[i][j] is the average of the rounded-down average intensities of these regions, rounded down to the nearest integer. If image[i][j] does not belong to any region, result[i][j] is equal to image[i][j].\nReturn the grid result.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def resultGrid(self, image: List[List[int]], threshold: int) -> List[List[int]]:\n```\n"}
{"task_id": 3290, "prompt": "You are given a 0-indexed integer array nums of size n, and a 0-indexed integer array pattern of size m consisting of integers -1, 0, and 1.\nA subarray nums[i..j] of size m + 1 is said to match the pattern if the following conditions hold for each element pattern[k]:\n\nnums[i + k + 1] > nums[i + k] if pattern[k] == 1.\nnums[i + k + 1] == nums[i + k] if pattern[k] == 0.\nnums[i + k + 1] < nums[i + k] if pattern[k] == -1.\n\nReturn the count of subarrays in nums that match the pattern.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -> int:\n```\n"}
{"task_id": 3296, "prompt": "You are given a 0-indexed string word and an integer k.\nAt every second, you must perform the following operations:\n\nRemove the first k characters of word.\nAdd any k characters to the end of word.\n\nNote that you do not necessarily need to add the same characters that you removed. However, you must perform both operations at every second.\nReturn the minimum time greater than zero required for word to revert to its initial state.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumTimeToInitialState(self, word: str, k: int) -> int:\n```\n"}
{"task_id": 3303, "prompt": "You are given a 0-indexed string s, a string a, a string b, and an integer k.\nAn index i is beautiful if:\n\n0 <= i <= s.length - a.length\ns[i..(i + a.length - 1)] == a\nThere exists an index j such that:\n    \n0 <= j <= s.length - b.length\ns[j..(j + b.length - 1)] == b\n|j - i| <= k\n\n\n\nReturn the array that contains beautiful indices in sorted order from smallest to largest.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n```\n"}
{"task_id": 3309, "prompt": "You are given a 0-indexed string array words.\nLet's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:\n\nisPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise.\n\nFor example, isPrefixAndSuffix(\"aba\", \"ababa\") is true because \"aba\" is a prefix of \"ababa\" and also a suffix, but isPrefixAndSuffix(\"abc\", \"abcd\") is false.\nReturn an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:\n```\n"}
{"task_id": 3313, "prompt": "You are given an array of integers nums with length n, and a positive odd integer k.\nSelect exactly k disjoint subarrays sub1, sub2, ..., subk from nums such that the last element of subi appears before the first element of sub{i+1} for all 1 <= i <= k-1. The goal is to maximize their combined strength.\nThe strength of the selected subarrays is defined as:\nstrength = k * sum(sub1)- (k - 1) * sum(sub2) + (k - 2) * sum(sub3) - ... - 2 * sum(sub{k-1}) + sum(subk)\nwhere sum(subi) is the sum of the elements in the i-th subarray.\nReturn the maximum possible strength that can be obtained from selecting exactly k disjoint subarrays from nums.\nNote that the chosen subarrays don't need to cover the entire array.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumStrength(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3325, "prompt": "There exist n rectangles in a 2D plane with edges parallel to the x and y axis. You are given two 2D integer arrays\u00a0bottomLeft and topRight\u00a0where bottomLeft[i] = [a_i, b_i] and topRight[i] = [c_i, d_i] represent\u00a0the bottom-left and top-right coordinates of the ith rectangle, respectively.\nYou need to find the maximum area of a square that can fit inside the intersecting region of at least two rectangles. Return 0 if such a square does not exist.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def largestSquareArea(self, bottomLeft: List[List[int]], topRight: List[List[int]]) -> int:\n```\n"}
{"task_id": 3328, "prompt": "You are given a positive integer k. Initially, you have an array nums = [1].\nYou can perform any of the following operations on the array any number of times (possibly zero):\n\nChoose any element in the array and increase its value by 1.\nDuplicate any element in the array and add it to the end of the array.\n\nReturn the minimum number of operations required to make the sum of elements of the final array greater than or equal to k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperations(self, k: int) -> int:\n```\n"}
{"task_id": 3330, "prompt": "Given a 0-indexed m x n integer matrix matrix, create a new 0-indexed matrix called answer. Make answer equal to matrix, then replace each element with the value -1 with the maximum element in its respective column.\nReturn the matrix answer.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def modifiedMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n```\n"}
{"task_id": 3334, "prompt": "You are given an array apple of size n and an array capacity of size m.\nThere are n packs where the ith pack contains apple[i] apples. There are m boxes as well, and the ith box has a capacity of capacity[i] apples.\nReturn the minimum number of boxes you need to select to redistribute these n packs of apples into boxes.\nNote that, apples from the same pack can be distributed into different boxes.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumBoxes(self, apple: List[int], capacity: List[int]) -> int:\n```\n"}
{"task_id": 3335, "prompt": "You are given a 0-indexed n x n grid where n is odd, and grid[r][c] is 0, 1, or 2.\nWe say that a cell belongs to the Letter Y if it belongs to one of the following:\n\nThe diagonal starting at the top-left cell and ending at the center cell of the grid.\nThe diagonal starting at the top-right cell and ending at the center cell of the grid.\nThe vertical line starting at the center cell and ending at the bottom border of the grid.\n\nThe Letter Y is written on the grid if and only if:\n\nAll values at cells belonging to the Y are equal.\nAll values at cells not belonging to the Y are equal.\nThe values at cells belonging to the Y are different from the values at cells not belonging to the Y.\n\nReturn the minimum number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to 0, 1, or 2.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperationsToWriteY(self, grid: List[List[int]]) -> int:\n```\n"}
{"task_id": 3336, "prompt": "You are given two integers numBottles and numExchange.\nnumBottles represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations:\n\nDrink any number of full water bottles turning them into empty bottles.\nExchange numExchange empty bottles with one full water bottle. Then, increase numExchange by one.\n\nNote that you cannot exchange multiple batches of empty bottles for the same value of numExchange. For example, if numBottles == 3 and numExchange == 1, you cannot exchange 3 empty water bottles for 3 full bottles.\nReturn the maximum number of water bottles you can drink.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxBottlesDrunk(self, numBottles: int, numExchange: int) -> int:\n```\n"}
{"task_id": 3337, "prompt": "You are given a string s and a character c. Return the total number of substrings of s that start and end with c.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubstrings(self, s: str, c: str) -> int:\n```\n"}
{"task_id": 3338, "prompt": "You are given a 0-indexed integer matrix grid and an integer k.\nReturn the number of submatrices that contain the top-left element of the grid, and have a sum less than or equal to k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countSubmatrices(self, grid: List[List[int]], k: int) -> int:\n```\n"}
{"task_id": 3344, "prompt": "You are given an array points representing integer coordinates of some points on a 2D plane, where points[i] = [xi, yi].\nThe distance between two points is defined as their Manhattan distance.\nReturn the minimum possible value for maximum distance between any two points by removing exactly one point.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n```\n"}
{"task_id": 3346, "prompt": "You are given a string s and an integer k.\nDefine a function distance(s1, s2) between two strings s1 and s2 of the same length n as:\n\nThe sum of the minimum distance between s1[i] and s2[i] when the characters from 'a' to 'z' are placed in a cyclic order, for all i in the range [0, n - 1].\n\nFor example, distance(\"ab\", \"cd\") == 4, and distance(\"a\", \"z\") == 1.\nYou can change any letter of s to any other lowercase English letter, any number of times.\nReturn a string denoting the lexicographically smallest string t you can get after some changes, such that distance(s, t) <= k.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def getSmallestString(self, s: str, k: int) -> str:\n```\n"}
{"task_id": 3348, "prompt": "There is an undirected weighted graph with n vertices labeled from 0 to n - 1.\nYou are given the integer n and an array edges, where edges[i] = [ui, vi, wi] indicates that there is an edge between vertices ui and vi with a weight of wi.\nA walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It's important to note that a walk may visit the same edge or vertex more than once.\nThe cost of a walk starting at node u and ending at node v is defined as the bitwise AND of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is w0, w1, w2, ..., wk, then the cost is calculated as w0 & w1 & w2 & ... & wk, where & denotes the bitwise AND operator.\nYou are also given a 2D array query, where query[i] = [si, ti]. For each query, you need to find the minimum cost of the walk starting at vertex si and ending at vertex ti. If there exists no such walk, the answer is -1.\nReturn the array answer, where answer[i] denotes the minimum cost of a walk for query i.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumCost(self, n: int, edges: List[List[int]], query: List[List[int]]) -> List[int]:\n```\n"}
{"task_id": 3349, "prompt": "Given a string s, return the maximum length of a substring\u00a0such that it contains at most two occurrences of each character.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumLengthSubstring(self, s: str) -> int:\n```\n"}
{"task_id": 3350, "prompt": "You are given a 1-indexed array of integers nums of length n.\nWe define a function greaterCount such that greaterCount(arr, val) returns the number of elements in arr that are strictly greater than val.\nYou need to distribute all the elements of nums between two arrays arr1 and arr2 using n operations. In the first operation, append nums[1] to arr1. In the second operation, append nums[2] to arr2. Afterwards, in the ith operation:\n\nIf greaterCount(arr1, nums[i]) > greaterCount(arr2, nums[i]), append nums[i] to arr1.\nIf greaterCount(arr1, nums[i]) < greaterCount(arr2, nums[i]), append nums[i] to arr2.\nIf greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i]), append nums[i] to the array with a lesser number of elements.\nIf there is still a tie, append nums[i] to arr1.\n\nThe array result is formed by concatenating the arrays arr1 and arr2. For example, if arr1 == [1,2,3] and arr2 == [4,5,6], then result = [1,2,3,4,5,6].\nReturn the integer array result.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def resultArray(self, nums: List[int]) -> List[int]:\n```\n"}
{"task_id": 3353, "prompt": "Given a string s, find any substring of length 2 which is also present in the reverse of s.\nReturn true if such a substring exists, and false otherwise.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isSubstringPresent(self, s: str) -> bool:\n```\n"}
{"task_id": 3360, "prompt": "You are given a string word and an integer k.\nWe consider word to be k-special if |freq(word[i]) - freq(word[j])| <= k for all indices i and j in the string.\nHere, freq(x) denotes the frequency of the character x in word, and |y| denotes the absolute value of y.\nReturn the minimum number of characters you need to delete to make word k-special.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumDeletions(self, word: str, k: int) -> int:\n```\n"}
{"task_id": 3361, "prompt": "You are given a string s representing a 12-hour format time where some of the digits (possibly none) are replaced with a \"?\".\n12-hour times are formatted as \"HH:MM\", where HH is between 00 and 11, and MM is between 00 and 59. The earliest 12-hour time is 00:00, and the latest is 11:59.\nYou have to replace all the \"?\" characters in s with digits such that the time we obtain by the resulting string is a valid 12-hour format time and is the latest possible.\nReturn the resulting string.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findLatestTime(self, s: str) -> str:\n```\n"}
{"task_id": 3363, "prompt": "The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, nums and freq, of equal length n. Each element in nums represents an ID, and the corresponding element in freq indicates how many times that ID should be added to or removed from the collection at each step.\n\nAddition of IDs: If freq[i] is positive, it means freq[i] IDs with the value nums[i] are added to the collection at step i.\nRemoval of IDs: If freq[i] is negative, it means -freq[i] IDs with the value nums[i] are removed from the collection at step i.\n\nReturn an array ans of length n, where ans[i] represents the count of the most frequent ID in the collection after the ith\u00a0step. If the collection is empty at any step, ans[i] should be 0 for that step.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def mostFrequentIDs(self, nums: List[int], freq: List[int]) -> List[int]:\n```\n"}
{"task_id": 3371, "prompt": "An integer divisible by the sum of its digits is said to be a Harshad number. You are given an integer x. Return the sum of the digits of x if x is a Harshad number, otherwise, return -1.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumOfTheDigitsOfHarshadNumber(self, x: int) -> int:\n```\n"}
{"task_id": 3372, "prompt": "You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def longestMonotonicSubarray(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3373, "prompt": "You are given an integer array nums.\nReturn an integer that is the maximum distance between the indices of two (not necessarily different) prime numbers in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumPrimeDifference(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3374, "prompt": "You are given a binary array nums.\nWe call a subarray alternating if no two adjacent elements in the subarray have the same value.\nReturn the number of alternating subarrays in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def countAlternatingSubarrays(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3376, "prompt": "You are given two arrays of strings wordsContainer and wordsQuery.\nFor each wordsQuery[i], you need to find a string from wordsContainer that has the longest common suffix with wordsQuery[i]. If there are two or more strings in wordsContainer that share the longest common suffix, find the string that is the smallest in length. If there are two or more such strings that have the same smallest length, find the one that occurred earlier in wordsContainer.\nReturn an array of integers ans, where ans[i] is the index of the string in wordsContainer that has the longest common suffix with wordsQuery[i].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def stringIndices(self, wordsContainer: List[str], wordsQuery: List[str]) -> List[int]:\n```\n"}
{"task_id": 3383, "prompt": "In a mystic dungeon, n magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.\nYou have been cursed in such a way that after absorbing energy from magician i, you will be instantly transported to magician (i + k). This process will be repeated until you reach the magician where (i + k) does not exist.\nIn other words, you will choose a starting point and then teleport with k jumps until you reach the end of the magicians' sequence, absorbing all the energy during the journey.\nYou are given an array energy and an integer k. Return the maximum possible energy you can gain.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maximumEnergy(self, energy: List[int], k: int) -> int:\n```\n"}
{"task_id": 3384, "prompt": "You are given a string word of size n, and an integer k such that k divides n.\nIn one operation, you can pick any two indices i and j, that are divisible by k, then replace the substring of length k starting at i with the substring of length k starting at j. That is, replace the substring word[i..i + k - 1] with the substring word[j..j + k - 1].\nReturn the minimum number of operations required to make word k-periodic.\nWe say that word is k-periodic if there is some string s of length k such that word can be obtained by concatenating s an arbitrary number of times. For example, if word == \u201cababab\u201d, then word is 2-periodic for s = \"ab\".\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -> int:\n```\n"}
{"task_id": 3386, "prompt": "You are given an undirected weighted graph of n nodes numbered from 0 to n - 1. The graph consists of m edges represented by a 2D array edges, where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi.\nConsider all the shortest paths from node 0 to node n - 1 in the graph. You need to find a boolean array answer where answer[i] is true if the edge edges[i] is part of at least one shortest path. Otherwise, answer[i] is false.\nReturn the array answer.\nNote that the graph may not be connected.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findAnswer(self, n: int, edges: List[List[int]]) -> List[bool]:\n```\n"}
{"task_id": 3387, "prompt": "You are given an integer array nums and a non-negative integer k. In one operation, you can increase or decrease any element by 1.\nReturn the minimum number of operations needed to make the median of nums equal to k.\nThe median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minOperationsToMakeMedianK(self, nums: List[int], k: int) -> int:\n```\n"}
{"task_id": 3391, "prompt": "You are given an m x n matrix grid consisting of positive integers. You can move from a cell in the matrix to any other cell that is either to the bottom or to the right (not necessarily adjacent). The score of a move from a cell with the value c1 to a cell with the value c2 is c2 - c1.\nYou can start at any cell, and you have to make at least one move.\nReturn the maximum total score you can achieve.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def maxScore(self, grid: List[List[int]]) -> int:\n```\n"}
{"task_id": 3394, "prompt": "You are given two integers n and x. You have to construct an array of positive integers nums of size n where for every 0 <= i < n - 1, nums[i + 1] is greater than nums[i], and the result of the bitwise AND operation between all elements of nums is x.\nReturn the minimum possible value of nums[n - 1].\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minEnd(self, n: int, x: int) -> int:\n```\n"}
{"task_id": 3396, "prompt": "A word is considered valid if:\n\nIt contains a minimum of 3 characters.\nIt contains only digits (0-9), and English letters (uppercase and lowercase).\nIt includes at least one vowel.\nIt includes at least one consonant.\n\nYou are given a string word.\nReturn true if word is valid, otherwise, return false.\nNotes:\n\n'a', 'e', 'i', 'o', 'u', and their uppercases are vowels.\nA consonant is an English letter that is not a vowel.\n\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isValid(self, word: str) -> bool:\n```\n"}
{"task_id": 3397, "prompt": "You are given two arrays of equal length, nums1 and nums2.\nEach element in nums1 has been increased (or decreased in the case of negative) by an integer, represented by the variable x.\nAs a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies.\nReturn the integer x.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def addedInteger(self, nums1: List[int], nums2: List[int]) -> int:\n```\n"}
{"task_id": 3399, "prompt": "You are given two integer arrays nums1 and nums2.\nFrom nums1 two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable x.\nAs a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies.\nReturn the minimum possible integer x that achieves this equivalence.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumAddedInteger(self, nums1: List[int], nums2: List[int]) -> int:\n```\n"}
{"task_id": 3404, "prompt": "You are given a 2D matrix grid of size m x n. In one operation, you can change the value of any cell to any non-negative number. You need to perform some operations such that each cell grid[i][j] is:\n\nEqual to the cell below it, i.e. grid[i][j] == grid[i + 1][j] (if it exists).\nDifferent from the cell to its right, i.e. grid[i][j] != grid[i][j + 1] (if it exists).\n\nReturn the minimum number of operations needed.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def minimumOperations(self, grid: List[List[int]]) -> int:\n```\n"}
{"task_id": 3405, "prompt": "You are given a string word. A letter\u00a0c is called special if it appears both in lowercase and uppercase in word, and every lowercase occurrence of c appears before the first uppercase occurrence of c.\nReturn the number of special letters in word.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSpecialChars(self, word: str) -> int:\n```\n"}
{"task_id": 3408, "prompt": "You are given a string word. A letter is called special if it appears both in lowercase and uppercase in word.\nReturn the number of special letters in word.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def numberOfSpecialChars(self, word: str) -> int:\n```\n"}
{"task_id": 3412, "prompt": "You are given two strings s and t such that every character occurs at most once in s and t is a permutation of s.\nThe permutation difference between s and t is defined as the sum of the absolute difference between the index of the occurrence of each character in s and the index of the occurrence of the same character in t.\nReturn the permutation difference between s and t.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def findPermutationDifference(self, s: str, t: str) -> int:\n```\n"}
{"task_id": 3416, "prompt": "You are given an array nums consisting of positive integers where all integers have the same number of digits.\nThe digit difference between two integers is the count of different digits that are in the same position in the two integers.\nReturn the sum of the digit differences between all pairs of integers in nums.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def sumDigitDifferences(self, nums: List[int]) -> int:\n```\n"}
{"task_id": 3427, "prompt": "An array is considered special if every pair of its adjacent elements contains two numbers with different parity.\nYou are given an array of integer nums and a 2D integer matrix queries, where for queries[i] = [fromi, toi] your task is to check that subarray nums[fromi..toi] is special or not.\nReturn an array of booleans answer such that answer[i] is true if nums[fromi..toi] is special.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:\n```\n"}
{"task_id": 3429, "prompt": "An array is considered special if every pair of its adjacent elements contains two numbers with different parity.\nYou are given an array of integers nums. Return true if nums is a special array, otherwise, return false.\n\u00a0\nPlease complete the following python code precisely:\n```python\nclass Solution:\n    def isArraySpecial(self, nums: List[int]) -> bool:\n```\n"}
